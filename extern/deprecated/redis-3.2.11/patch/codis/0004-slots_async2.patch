diff --git a/extern/redis-3.2.8/src/help.h b/extern/redis-3.2.8/src/help.h
index 3d57430..bf27662 100644
--- a/extern/redis-3.2.8/src/help.h
+++ b/extern/redis-3.2.8/src/help.h
@@ -1085,6 +1085,10 @@ struct commandHelp {
         "-",
         "", 14, "codis3.2"
     },
+    {"SLOTSMGRT-ASYNC-STATUS",
+        "-",
+        "", 14, "codis3.2"
+    },
     {"SLOTSMGRT-EXEC-WRAPPER",
         "hashkey command [arg ...]",
         "", 14, "codis3.2"
diff --git a/extern/redis-3.2.8/src/server.c b/extern/redis-3.2.8/src/server.c
index 8946e65..7a24804 100644
--- a/extern/redis-3.2.8/src/server.c
+++ b/extern/redis-3.2.8/src/server.c
@@ -315,6 +315,7 @@ struct redisCommand redisCommandTable[] = {
     {"slotsmgrttagone-async-dump",slotsmgrtTagOneAsyncDumpCommand,-4,"rm",0,NULL,0,0,0,0,0},
     {"slotsmgrt-async-fence",slotsmgrtAsyncFenceCommand,0,"r",0,NULL,0,0,0,0,0},
     {"slotsmgrt-async-cancel",slotsmgrtAsyncCancelCommand,0,"F",0,NULL,0,0,0,0,0},
+    {"slotsmgrt-async-status",slotsmgrtAsyncStatusCommand,0,"F",0,NULL,0,0,0,0,0},
     {"slotsmgrt-exec-wrapper",slotsmgrtExecWrapperCommand,-3,"wm",0,NULL,0,0,0,0,0},
     {"slotsmgrt-lazy-release",slotsmgrtLazyReleaseCommand,-1,"r",0,NULL,0,0,0,0,0},
     {"slotsrestore-async",slotsrestoreAsyncCommand,-2,"w",0,NULL,0,0,0,0,0},
diff --git a/extern/redis-3.2.8/src/server.h b/extern/redis-3.2.8/src/server.h
index d34ee4f..234f569 100644
--- a/extern/redis-3.2.8/src/server.h
+++ b/extern/redis-3.2.8/src/server.h
@@ -1700,6 +1700,7 @@ void slotsmgrtTagOneAsyncCommand(client *c);
 void slotsmgrtTagOneAsyncDumpCommand(client *c);
 void slotsmgrtAsyncFenceCommand(client *c);
 void slotsmgrtAsyncCancelCommand(client *c);
+void slotsmgrtAsyncStatusCommand(client *c);
 void slotsmgrtExecWrapperCommand(client *c);
 void slotsmgrtLazyReleaseCommand(client *c);
 void slotsrestoreAsyncCommand(client *c);
diff --git a/extern/redis-3.2.8/src/slots_async.c b/extern/redis-3.2.8/src/slots_async.c
index 73b3205..852d96b 100644
--- a/extern/redis-3.2.8/src/slots_async.c
+++ b/extern/redis-3.2.8/src/slots_async.c
@@ -241,7 +241,7 @@ typedef struct {
     unsigned long cursor;
     unsigned long lindex;
     unsigned long zindex;
-    int chunked;
+    unsigned long chunked_msgs;
 } singleObjectIterator;
 
 static singleObjectIterator *
@@ -255,7 +255,7 @@ createSingleObjectIterator(robj *key) {
     it->cursor = 0;
     it->lindex = 0;
     it->zindex = 0;
-    it->chunked = 0;
+    it->chunked_msgs = 0;
     return it;
 }
 
@@ -414,18 +414,18 @@ singleObjectIteratorNext(client *c, singleObjectIterator *it,
         incrRefCount(it->val);
         it->expire = getExpire(c->db, key);
 
-        int extra_msgs = 0;
+        int leading_msgs = 0;
 
-        slotsmgrtAsyncClient *client = getSlotsmgrtAsyncClient(c->db->id);
-        if (client->c == c) {
-            if (client->used == 0) {
-                client->used = 1;
+        slotsmgrtAsyncClient *ac = getSlotsmgrtAsyncClient(c->db->id);
+        if (ac->c == c) {
+            if (ac->used == 0) {
+                ac->used = 1;
                 if (server.requirepass != NULL) {
                     /* SLOTSRESTORE-ASYNC-AUTH $password */
                     addReplyMultiBulkLen(c, 2);
                     addReplyBulkCString(c, "SLOTSRESTORE-ASYNC-AUTH");
                     addReplyBulkCString(c, server.requirepass);
-                    extra_msgs += 1;
+                    leading_msgs += 1;
                 }
                 do {
                     /* SLOTSRESTORE-ASYNC select $db */
@@ -433,7 +433,7 @@ singleObjectIteratorNext(client *c, singleObjectIterator *it,
                     addReplyBulkCString(c, "SLOTSRESTORE-ASYNC");
                     addReplyBulkCString(c, "select");
                     addReplyBulkLongLong(c, c->db->id);
-                    extra_msgs += 1;
+                    leading_msgs += 1;
                 } while (0);
             }
         }
@@ -444,13 +444,15 @@ singleObjectIteratorNext(client *c, singleObjectIterator *it,
         addReplyBulkCString(c, "del");
         addReplyBulk(c, key);
 
-        if (numberOfRestoreCommandsFromObject(val, maxbulks) != 1) {
+        long n = numberOfRestoreCommandsFromObject(val, maxbulks);
+        if (n >= 2) {
             it->stage = STAGE_CHUNKED;
-            it->chunked = 1;
+            it->chunked_msgs = n;
         } else {
             it->stage = STAGE_PAYLOAD;
+            it->chunked_msgs = 0;
         }
-        return 1 + extra_msgs;
+        return 1 + leading_msgs;
     }
 
     robj *val = it->val;
@@ -680,7 +682,7 @@ batchedObjectIteratorHasNext(batchedObjectIterator *it) {
         if (sp->val != NULL) {
             incrRefCount(sp->key);
             listAddNodeTail(it->removed_keys, sp->key);
-            if (sp->chunked) {
+            if (sp->chunked_msgs != 0) {
                 incrRefCount(sp->val);
                 listAddNodeTail(it->chunked_vals, sp->val);
             }
@@ -1286,6 +1288,137 @@ slotsmgrtAsyncCancelCommand(client *c) {
     addReplyLongLong(c, releaseSlotsmgrtAsyncClient(c->db->id, "interrupted: canceled"));
 }
 
+/* ============================ SlotsmgrtAsyncStatus ======================================= */
+
+static void
+singleObjectIteratorStatus(client *c, singleObjectIterator *it) {
+    if (it == NULL) {
+        addReply(c, shared.nullmultibulk);
+        return;
+    }
+    void *ptr = addDeferredMultiBulkLength(c);
+    int fields = 0;
+
+    fields ++; addReplyBulkCString(c, "key");
+    addReplyBulk(c, it->key);
+
+    fields ++; addReplyBulkCString(c, "val.type");
+    addReplyBulkLongLong(c, it->val == NULL ? -1 : it->val->type);
+
+    fields ++; addReplyBulkCString(c, "stage");
+    addReplyBulkLongLong(c, it->stage);
+
+    fields ++; addReplyBulkCString(c, "expire");
+    addReplyBulkLongLong(c, it->expire);
+
+    fields ++; addReplyBulkCString(c, "cursor");
+    addReplyBulkLongLong(c, it->cursor);
+
+    fields ++; addReplyBulkCString(c, "lindex");
+    addReplyBulkLongLong(c, it->lindex);
+
+    fields ++; addReplyBulkCString(c, "zindex");
+    addReplyBulkLongLong(c, it->zindex);
+
+    fields ++; addReplyBulkCString(c, "chunked_msgs");
+    addReplyBulkLongLong(c, it->chunked_msgs);
+
+    setDeferredMultiBulkLength(c, ptr, fields * 2);
+}
+
+static void
+batchedObjectIteratorStatus(client *c, batchedObjectIterator *it) {
+    if (it == NULL) {
+        addReply(c, shared.nullmultibulk);
+        return;
+    }
+    void *ptr = addDeferredMultiBulkLength(c);
+    int fields = 0;
+
+    fields ++; addReplyBulkCString(c, "keys");
+    addReplyMultiBulkLen(c, 2);
+    addReplyBulkLongLong(c, dictSize(it->keys));
+    addReplyMultiBulkLen(c, dictSize(it->keys));
+    dictIterator *di = dictGetIterator(it->keys);
+    dictEntry *de;
+    while((de = dictNext(di)) != NULL) {
+        addReplyBulk(c, dictGetKey(de));
+    }
+    dictReleaseIterator(di);
+
+    fields ++; addReplyBulkCString(c, "timeout");
+    addReplyBulkLongLong(c, it->timeout);
+
+    fields ++; addReplyBulkCString(c, "maxbulks");
+    addReplyBulkLongLong(c, it->maxbulks);
+
+    fields ++; addReplyBulkCString(c, "maxbytes");
+    addReplyBulkLongLong(c, it->maxbytes);
+
+    fields ++; addReplyBulkCString(c, "estimate_msgs");
+    addReplyBulkLongLong(c, it->estimate_msgs);
+
+    fields ++; addReplyBulkCString(c, "removed_keys");
+    addReplyBulkLongLong(c, listLength(it->removed_keys));
+
+    fields ++; addReplyBulkCString(c, "chunked_vals");
+    addReplyBulkLongLong(c, listLength(it->chunked_vals));
+
+    fields ++; addReplyBulkCString(c, "iterators");
+    addReplyMultiBulkLen(c, 2);
+    addReplyBulkLongLong(c, listLength(it->list));
+    singleObjectIterator *sp = NULL;
+    if (listLength(it->list) != 0) {
+        sp = listNodeValue(listFirst(it->list));
+    }
+    singleObjectIteratorStatus(c, sp);
+
+    setDeferredMultiBulkLength(c, ptr, fields * 2);
+}
+
+/* *
+ * SLOTSMGRT-ASYNC-STATUS
+ * */
+void
+slotsmgrtAsyncStatusCommand(client *c) {
+    slotsmgrtAsyncClient *ac = getSlotsmgrtAsyncClient(c->db->id);
+    if (ac->c == NULL) {
+        addReply(c, shared.nullmultibulk);
+        return;
+    }
+    void *ptr = addDeferredMultiBulkLength(c);
+    int fields = 0;
+
+    fields ++; addReplyBulkCString(c, "host");
+    addReplyBulkCString(c, ac->host);
+
+    fields ++; addReplyBulkCString(c, "port");
+    addReplyBulkLongLong(c, ac->port);
+
+    fields ++; addReplyBulkCString(c, "used");
+    addReplyBulkLongLong(c, ac->used);
+
+    fields ++; addReplyBulkCString(c, "timeout");
+    addReplyBulkLongLong(c, ac->timeout);
+
+    fields ++; addReplyBulkCString(c, "lastuse");
+    addReplyBulkLongLong(c, ac->lastuse);
+
+    fields ++; addReplyBulkCString(c, "since_lastuse");
+    addReplyBulkLongLong(c, mstime() - ac->lastuse);
+
+    fields ++; addReplyBulkCString(c, "blocked_clients");
+    addReplyBulkLongLong(c, listLength(ac->blocked_list));
+
+    fields ++; addReplyBulkCString(c, "sending_messages");
+    addReplyBulkLongLong(c, ac->sending_msgs);
+
+    fields ++; addReplyBulkCString(c, "batched_iterator");
+    batchedObjectIteratorStatus(c, ac->batched_iter);
+
+    setDeferredMultiBulkLength(c, ptr, fields * 2);
+}
+
 /* ============================ SlotsmgrtExecWrapper ======================================= */
 
 /* *
